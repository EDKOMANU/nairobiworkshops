# so let's filter by date!
x <- gd_collection_from_name("MODIS/061/MOD13A1") |>
gd_search(region = bbox,
start_date = "2019-01-01",
end_date = "2019-12-31")
gd_properties(x)$date
#| eval: true
#| echo: true
#| code-fold: show
#| class-output: hscroll
# get the dates
dates <- gd_properties(x)$date
# here are the months
months <- format(dates, "%m")
months
# here are the months
months <- month(dates)
months
monthsofyear <- 1:12
#| eval: true
#| echo: true
#| code-fold: show
#| class-output: hscroll
# get the dates
dates <- gd_properties(x)$date
# here are the months
months <- month(dates)
ids <- c()
for (m in 1:12){
ids <- c(ids, which(months == m)[1])
}
ids
gd_properties(x)
ids <- gd_properties(x)$id[ids]
ids
gd_properties(x)
#| eval: true
#| echo: true
#| class-output: hscroll
# but we really only want average nightlights
# so here's how you can download just the average
x <- gd_image_from_id("MODIS/061/MOD13A1/2019_01_01") |>
gd_download(
filename = "temp.tif",
region = bbox, # region is our bbox
scale = 500, # resolution of raster is only 500, so no reason to go lower
crs = 'EPSG:4326', # lat/lon
overwrite = TRUE, # overwrite if it exists
silent = FALSE
)
# we downloaded the raster and called it x
# so let's load it using terra!
x <- rast(x)
# here it is!
x
#| eval: true
#| echo: true
#| class-output: hscroll
# but we really only want average nightlights
# so here's how you can download just the average
x <- gd_image_from_id("MODIS/061/MOD13A1/2019_01_01") |>
gd_download(
filename = "temp.tif",
region = bbox, # region is our bbox
scale = 500, # resolution of raster is only 500, so no reason to go lower
crs = 'EPSG:4326', # lat/lon
overwrite = TRUE, # overwrite if it exists
silent = FALSE,
bands = list("NDVI") # only download NDVI
)
# here it is!
x
# we downloaded the raster and called it x
# so let's load it using terra!
x <- rast(x)
# here it is!
x
ndviextract <- exact_extract(x, malawi, fun = "mean", append_cols = "EA_CODE")
library(exactextractr)
ndviextract <- exact_extract(x, malawi, fun = "mean", append_cols = "EA_CODE")
ggplot() +
geom_spatraster(data = ndviextract) +
scale_fill_distiller("Nightlights",
palette = "Greens") +
geom_sf(data = adm4,
color = "white",
lwd = 0.01,
alpha = 0.5,
fill = "transparent") +
theme_minimal() +
labs(subtitle = "NDVI in Malawi")
ndviextract
ggplot() +
geom_spatraster(data = ndviextract) +
scale_fill_distiller("Nightlights",
palette = "Greens") +
geom_sf(data = adm4,
color = "white",
lwd = 0.01,
alpha = 0.5,
fill = "transparent") +
theme_minimal() +
labs(subtitle = "NDVI in Malawi")
adm4 <- adm4 |>
left_join(ndviextract |> rename(ndvi = mean), by = "EA_CODE")
malawi <- malawi |>
left_join(ndviextract |> rename(ndvi = mean), by = "EA_CODE")
ggplot() +
geom_sf(data = malawi,
aes(fill = ndvi),
lwd = 0.01,) +
scale_fill_distiller("NDVI",
palette = "Greens") +
theme_minimal()
ggplot() +
geom_sf(data = malawi,
aes(fill = ndvi),
lwd = 0.01,) +
scale_fill_distiller("NDVI",
palette = "Greens") +
theme_minimal()
ggplot() +
geom_sf(data = malawi,
aes(fill = ndvi),
lwd = 0.01,) +
scale_fill_distiller("NDVI",
palette = "Greens", direction = -1) +
theme_minimal()
ggplot() +
geom_sf(data = malawi,
aes(fill = ndvi),
lwd = 0.01,) +
scale_fill_distiller("NDVI",
palette = "Greens", direction = -1) +
theme_minimal()
ggplot() +
geom_sf(data = malawi,
aes(fill = ndvi),
lwd = 0.01,) +
scale_fill_distiller("NDVI",
palette = "Greens", direction = 1) +
theme_minimal()
ids
#| label: setup
#| include: false
widthdefault <- getOption("width")
options(width = 1500)
library(tidyverse)
library(sf)
library(cowplot)
library(haven)
library(terra)
library(tidyterra)
library(exactextractr)
Sys.setenv("RETICULATE_PYTHON" = "~/Library/r-miniconda-arm64/envs/RGEEDIM/bin/python3.9")
library(rgeedim)
# short duration token
gd_authenticate(auth_mode = "gcloud")
# initialize and should be good to go
gd_initialize()
#| eval: true
#| echo: true
#| code-fold: show
#| class-output: hscroll
# load shapefile
malawi <- read_sf("day4data/mw4.shp")
# this creates the bounding box
bbox <- st_bbox(malawi)
# so let's filter by date!
x <- gd_collection_from_name("MODIS/061/MOD13A1") |>
gd_search(region = bbox,
start_date = "2019-01-01",
end_date = "2019-12-31")
gd_properties(x)
#| eval: true
#| echo: true
#| code-fold: show
#| class-output: hscroll
# get the dates
dates <- gd_properties(x)$date
# here are the months
months <- month(dates)
ids <- c() # this creates an empty vector
for (m in 1:12){ # this "for loop" loops through each month (1 through 12)
ids <- c(ids, which(months == m)[1]) # it then takes the LOCATION of the FIRST VALUE equal to m
}
ids <- gd_properties(x)$id[ids] # this gets the image ids at those locations
ids # Now we have all the ids we want to download!
adminareas <- malawi |>
as_tibble() |>
select(EA_CODE)
adminareas
ids
ids[1]
substr(ids[1], -1)
substr(ids[1], -1, .)
substr(ids[1], -2, 01)
substr(ids[1], -2, -1)
substr(ids[1], -5, -1)
i = 1
x <- gd_image_from_id(ids[i]) |>
gd_download(
filename = "temp.tif",
region = bbox, # region is our bbox
scale = 500, # resolution
crs = 'EPSG:4326', # lat/lon
overwrite = TRUE, # overwrite if it exists
bands = list("NDVI") # only download NDVI
)
x <- rast(x) # load raster
ndviextract <- exact_extract(x, malawi, fun = "mean", append_cols = "EA_CODE")
ndviextract
adminareas <- malawi |>
as_tibble() |>
select(EA_CODE)
x <- gd_image_from_id(ids[i]) |>
gd_download(
filename = "temp.tif",
region = bbox, # region is our bbox
scale = 500, # resolution
crs = 'EPSG:4326', # lat/lon
overwrite = TRUE, # overwrite if it exists
bands = list("NDVI") # only download NDVI
)
for (i in 1:length(ids)){
x <- gd_image_from_id(ids[i]) |>
gd_download(
filename = "temp.tif",
region = bbox, # region is our bbox
scale = 500, # resolution
crs = 'EPSG:4326', # lat/lon
overwrite = TRUE, # overwrite if it exists
bands = list("NDVI") # only download NDVI
)
x <- rast(x) # load raster
ndviextract <- exact_extract(x, malawi, fun = "mean", append_cols = "EA_CODE")
colnames(ndviextract) <- c("EA_CODE", paste0("NDVI_", i))
adminareas <- adminareas |>
left_join(ndviextract, by = "EA_CODE")
}
adminareas
getwd()
setwd("~/Dropbox/Papers/UN-SAE/workshops/africa/nairobiworkshops")
getwd()
write_csv(adminareas, "day4data/ndviallmonths.csv")
#| eval: false
#| echo: true
#| code-fold: true
#| class-output: hscroll
ndviall <- read_csv("day4data/ndviallmonths.csv")
ndviall
ndviall$min <- apply(ndviall |> select(starts_with("NDVI")), 1, min, na.rm = TRUE)
# max
ndviall$max <- apply(ndviall |> select(starts_with("NDVI")), 1, max, na.rm = TRUE)
# mean
ndviall$mean <- apply(ndviall |> select(starts_with("NDVI")), 1, mean, na.rm = TRUE)
ndviall
#| eval: true
#| echo: true
#| code-fold: true
#| class-output: hscroll
ndviall <- read_csv("day4data/ndviallmonths.csv")
#| eval: true
#| echo: true
#| code-fold: true
#| class-output: hscroll
# create new variable called min. the "1" means across ROWS.
ndviall$ndvimin <- apply(ndviall |> select(starts_with("NDVI")), 1, min, na.rm = TRUE)
# max
ndviall$ndvimax <- apply(ndviall |> select(starts_with("NDVI")), 1, max, na.rm = TRUE)
# mean
ndviall$ndvimean <- apply(ndviall |> select(starts_with("NDVI")), 1, mean, na.rm = TRUE)
# just keep those
ndviall <- ndviall |>
select(EA_CODE, ndvimin, ndvimax, ndvimean)
ndviall
summary(ndviall)
ihs5 <- read_csv("day4data/ihs5_consumption_aggregate.csv")
ihs5 <- read_dta("day4data/ihs5_consumption_aggregate.dta")
ihs5
ihs5 <- read_dta("day4data/ihs5_consumption_aggregate.dta")
ihs5
?weighted.mean
#| eval: true
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
#| eval: true
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
head(ihs5coords)
admin4 <- read_sf("day4data/mw4.shp")
# turn it into an sf object
ihs5coords <- ihs5coords |>
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
#| eval: true
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
head(ihs5coords)
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
head(ihs5coords)
#| eval: true
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
#| eval: true
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ggplot() +
geom_sf(admin4, color = "transparent", lwd = 0.01) +
geom_sf(ihs5coords, color = "red") +
theme_minimal()
ihs5coords
ggplot() +
geom_sf(data = admin4, color = "transparent", lwd = 0.01) +
geom_sf(data = ihs5coords, color = "red") +
theme_minimal()
#| echo: false
#| include: true
#| fig-align: center
admin2 <- read_sf("day4data/mw2.shp")
admin3 <- read_sf("day4data/mw3.shp")
admin3 <- st_transform(admin3, crs = st_crs(admin2))
survey <- read_dta("day4data/householdgeovariables_ihs5.dta")
survey$DIST_CODE <- substr(survey$EA_CODE, 1, 3)
#| echo: false
#| include: true
#| fig-align: center
admin2 <- read_sf("day4data/mw2.shp")
admin3 <- read_sf("day4data/mw3.shp")
admin3 <- st_transform(admin3, crs = st_crs(admin2))
survey <- read_dta("day4data/householdgeovariables_ihs5.dta")
survey$DIST_CODE <- substr(survey$EA_CODE, 1, 3)
survey
survey$DIST_CODE <- substr(survey$case_id, 1, 3)
survey$TA_CODE <- substr(survey$case_id, 1, 5)
temp <- survey |>
group_by(DIST_CODE) |>
summarise(n = n())
admin2 <- admin2 |>
left_join(temp, by = "DIST_CODE")
temp <- survey |>
group_by(TA_CODE) |>
summarise(n = n())
admin3 <- admin3 |>
left_join(temp, by = "TA_CODE")
admin3$n[is.na(admin3$n)] <- 0
g1 <- ggplot() +
geom_sf(data = admin2, aes(fill = n), color = NA, lwd = 0.001) +
scale_fill_distiller("Observations", palette = "Spectral") +
theme_bw() +
labs(subtitle = "District (admin2)")
g2 <- ggplot() +
geom_sf(data = admin3, aes(fill = n), color = NA, lwd = 0.001) +
scale_fill_distiller("Observations", palette = "Spectral") +
theme_bw() +
labs(subtitle = "TA (admin3)")
# extract the legend from one of the plots
legend <- ggpubr::get_legend(g1 +
# horizontal legend
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
grid <- plot_grid(g1 + theme(legend.position = "none"), g2 + theme(legend.position = "none"), ncol = 2)
plot_grid(grid, legend, ncol = 1, rel_heights = c(1, 0.1))
?weighted.mean
#| eval: true
#| echo: true
#| code-fold: show
library(stats) # this is for weighted.mean
ihs5ea <- ihs5 |>
rename(EA_CODE = ea_id) |>
group_by(EA_CODE) |>
# Note that this is a weighted mean!
summarize(poor = stats::weighted.mean(poor, wt = hh_wt*adulteq, na.rm = TRUE), # weighted mean
total_weights = sum(hh_wt*adulteq, na.rm = TRUE), # sum total weights
total_obs = n()) # total observations (households) in the EA
ihs5 <- read_dta("day4data/ihs5_consumption_aggregate.dta")
ihs5
ihs5ea <- ihs5 |>
rename(EA_CODE = ea_id) |>
group_by(EA_CODE) |>
# Note that this is a weighted mean!
summarize(poor = stats::weighted.mean(poor, wt = hh_wgt*adulteq, na.rm = TRUE), # weighted mean
total_weights = sum(hh_wgt*adulteq, na.rm = TRUE), # sum total weights
total_obs = n()) # total observations (households) in the EA
head(ihs5ea)
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
head(ihs5coords)
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
head(ihs5coords)
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
admin4
?stats::weighted.mean
ihs5ea <- ihs5 |>
rename(EA_CODE = ea_id) |>
group_by(EA_CODE) |>
# Note that this is a weighted mean!
summarize(poor = stats::weighted.mean(x = poor, w = hh_wgt*adulteq, na.rm = TRUE), # weighted mean
total_weights = sum(hh_wgt*adulteq, na.rm = TRUE), # sum total weights
total_obs = n()) # total observations (households) in the EA
#| eval: false
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ggplot() +
geom_sf(data = admin4, color = "transparent", lwd = 0.01) +
geom_sf(data = ihs5coords, color = "red") +
theme_minimal()
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ggplot() +
geom_sf(data = admin4, color = "transparent", lwd = 0.01) +
geom_sf(data = ihs5coords, color = "red") +
theme_minimal()
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ihs5coords <- st_join(ihs5coords, admin4)
head(ihs5coords)
st_extent(admin4)
raster::extent(admin4)
temp <- read_csv("/Users/Josh/Downloads/Mosaiks_features.csv")
head(temp)
temp <- temp[,-c("BoxLabel")]
temp <- temp |> dplyr::select(-c("BoxLabel"))
temp
temp
?rast
# use Lat/Lon to create point feature
temp <- temp |>
st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
temp
colnames(temp)[1:(length(colnames(temp))-1)] <- paste0("var", 1:(length(colnames(temp))-1))
colnames(temp)
temp <- st_join(temp, admin4)
temp <- temp |>
group_by(EA_CODE) |>
summarize(across(starts_with("var"), mean, na.rm = TRUE))
temp
object.size(temp)
write_csv(temp, "day4data/mosaikvars.csv")
for (i in ncol(temp):2){
if (sd(temp[,i]==0)){
temp <- temp[,-i]
}
}
temp
dim(temp)
sd(temp[,i])
sd(as_vector(temp[,i]))
temp[,i]
temp <- as_tibble(temp) |> dplyr::select(-geometry)
temp
temp[,i]
temp[,i-1]
i = ncol(temp)
sd(temp[,i])
temp[,i]
sd(as_vector(temp[,i]))
for (i in ncol(temp):2){
if (sd(as_vector(temp[,i]))==0){
temp <- temp[,-i]
}
}
dim(temp)
saveRDS(temp, "day4data/mosaikvars.rds")
for (i in ncol(temp):2){
if (sd(as_vector(temp[,i]))<=0.0001){
temp <- temp[,-i]
}
}
dim(temp)
# randomcols
temp <- temp[,sample(ncol(temp), 500)]
temp
write_csv(temp, "day4data/mosaikvars.csv")
