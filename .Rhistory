# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
admin4
?stats::weighted.mean
ihs5ea <- ihs5 |>
rename(EA_CODE = ea_id) |>
group_by(EA_CODE) |>
# Note that this is a weighted mean!
summarize(poor = stats::weighted.mean(x = poor, w = hh_wgt*adulteq, na.rm = TRUE), # weighted mean
total_weights = sum(hh_wgt*adulteq, na.rm = TRUE), # sum total weights
total_obs = n()) # total observations (households) in the EA
#| eval: false
#| echo: true
#| code-fold: show
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ggplot() +
geom_sf(data = admin4, color = "transparent", lwd = 0.01) +
geom_sf(data = ihs5coords, color = "red") +
theme_minimal()
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ggplot() +
geom_sf(data = admin4, color = "transparent", lwd = 0.01) +
geom_sf(data = ihs5coords, color = "red") +
theme_minimal()
ihs5coords <- read_dta("day4data/householdgeovariables_ihs5.dta")
# turn it into an sf object
ihs5coords <- ihs5coords |>
filter(!is.na(ea_lon_mod)) |> # get rid of any missing values (can't use them)
st_as_sf(coords = c("ea_lon_mod", "ea_lat_mod"), crs = 4326)
admin4 <- read_sf("day4data/mw4.shp")
ihs5coords <- st_join(ihs5coords, admin4)
head(ihs5coords)
st_extent(admin4)
raster::extent(admin4)
temp <- read_csv("/Users/Josh/Downloads/Mosaiks_features.csv")
head(temp)
temp <- temp[,-c("BoxLabel")]
temp <- temp |> dplyr::select(-c("BoxLabel"))
temp
temp
?rast
# use Lat/Lon to create point feature
temp <- temp |>
st_as_sf(coords = c("Lon", "Lat"), crs = 4326)
temp
colnames(temp)[1:(length(colnames(temp))-1)] <- paste0("var", 1:(length(colnames(temp))-1))
colnames(temp)
temp <- st_join(temp, admin4)
temp <- temp |>
group_by(EA_CODE) |>
summarize(across(starts_with("var"), mean, na.rm = TRUE))
temp
object.size(temp)
write_csv(temp, "day4data/mosaikvars.csv")
for (i in ncol(temp):2){
if (sd(temp[,i]==0)){
temp <- temp[,-i]
}
}
temp
dim(temp)
sd(temp[,i])
sd(as_vector(temp[,i]))
temp[,i]
temp <- as_tibble(temp) |> dplyr::select(-geometry)
temp
temp[,i]
temp[,i-1]
i = ncol(temp)
sd(temp[,i])
temp[,i]
sd(as_vector(temp[,i]))
for (i in ncol(temp):2){
if (sd(as_vector(temp[,i]))==0){
temp <- temp[,-i]
}
}
dim(temp)
saveRDS(temp, "day4data/mosaikvars.rds")
for (i in ncol(temp):2){
if (sd(as_vector(temp[,i]))<=0.0001){
temp <- temp[,-i]
}
}
dim(temp)
# randomcols
temp <- temp[,sample(ncol(temp), 500)]
temp
write_csv(temp, "day4data/mosaikvars.csv")
#| label: setup
#| include: false
widthdefault <- getOption("width")
options(width = 1500)
library(tidyverse)
library(sf)
library(cowplot)
library(haven)
library(terra)
library(tidyterra)
library(exactextractr)
Sys.setenv("RETICULATE_PYTHON" = "~/Library/r-miniconda-arm64/envs/RGEEDIM/bin/python3.9")
library(rgeedim)
# short duration token
gd_authenticate(auth_mode = "gcloud")
# initialize and should be good to go
gd_initialize()
library(tidyverse)
library(tidyverse)
surveycollapsed <- read_csv("day3data/ihs5ea.csv")
predictors <- read_csv("day3data/mosaikvars.csv")
surveycollapsed
#| label: setup
#| include: false
widthdefault <- getOption("width")
options(width = 1500)
library(tidyverse)
library(sf)
library(cowplot)
library(haven)
library(terra)
library(tidyterra)
library(exactextractr)
#| echo: false
#| include: true
#| fig-align: center
adm4 <- read_sf("day3data/mw4.shp")
adm4 <- adm4 |>
left_join(surveycollapsed, by = "EA_CODE")
adm4 <- adm4 |>
mutate(EA_CODE = as.numeric(EA_CODE))
adm4 <- adm4 |>
mutate(EA_CODE = as.numeric(EA_CODE)) |>
left_join(surveycollapsed, by = "EA_CODE")
adm4
adm4$insample <- "No"
adm4$insample[!is.na(adm4$poor)] <- "Yes"
table(adm4$insample)
ggplot() +
geom_df(data = adm4, aes(fill = insample), color = "transparent", lwd = 0.01) |>
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "transparent", lwd = 0.01) |>
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "transparent", lwd = 0.01) |>
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) |>
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) |>
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Set1") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Set2") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Accent") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Accent") +
theme_minimal()
ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_minimal()
g1 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_minimal() +
theme(legend.position = "bottom")
ggsave(g1, "day3assets/surveyexample.png")
?ggsave
ggsave("day3assets/surveyexample.png", plot = g1)
g1 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
theme(legend.position = "bottom")
ggsave("day3assets/surveyexample.png", plot = g1)
ggsave("day3assets/surveyexample.png", plot = g1, dpi = 500)
#| echo: false
#| include: false
#| fig-align: center
adm3 <- read_sf("day3data/mw3.shp")
adm3
surveycollapsed
surveyTA <- surveycollapsed |>
mutate(TA_CODE = substr(EA_CODE, 1, 5)) |>
group_by(TA_CODE) |>
summarize(poor = weighted.mean(poor, total_weights, na.rm = TRUE),
total_obs = sum(total_obs, na.rm = TRUE)) |>
ungroup()
surveyTA
adm3 <- adm3 |>
left_join(surveyTA, by = "TA_CODE")
adm3
adm3$insample <- "No"
adm3$insample[!is.na(adm3$poor)] <- "Yes"
g1 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
theme(legend.position = "bottom")
ggsave("day3assets/surveyexample.png", plot = g1, dpi = 500) # (did this once, don't do it again)
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "white", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
theme(legend.position = "bottom")
ggsave("day3assets/surveyexample.png", plot = g1, dpi = 500) # (did this once, don't do it again)
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "black", lwd = 0.1) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
theme(legend.position = "bottom")
ggsave("day3assets/surveyexample.png", plot = g1, dpi = 500) # (did this once, don't do it again)
#| echo: false
#| include: false
#| fig-align: center
adm4 <- read_sf("day3data/mw4.shp")
adm4 <- adm4 |>
mutate(EA_CODE = as.numeric(EA_CODE)) |>
left_join(surveycollapsed, by = "EA_CODE")
adm4$insample <- "No"
adm4$insample[!is.na(adm4$poor)] <- "Yes"
adm4
adm3 <- read_sf("day3data/mw3.shp")
surveyTA <- surveycollapsed |>
mutate(TA_CODE = substr(EA_CODE, 1, 5)) |>
group_by(TA_CODE) |>
summarize(poor = weighted.mean(poor, total_weights, na.rm = TRUE),
total_obs = sum(total_obs, na.rm = TRUE)) |>
ungroup()
adm3 <- adm3 |>
left_join(surveyTA, by = "TA_CODE")
adm3$insample <- "No"
adm3$insample[!is.na(adm3$poor)] <- "Yes"
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "black", lwd = 0.1) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "A. TA (area) level") +
theme(legend.position = "bottom")
g2 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "black", lwd = 0.1) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "B. EA (subarea) level") +
theme(legend.position = "bottom")
ggarrange(g1, g2, common.legend = TRUE)
library(ggpubr)
ggarrange(g1, g2, common.legend = TRUE)
ggarrange(g1, g2, common.legend = TRUE, legend = "bottom")
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "black", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "A. TA (area) level") +
theme(legend.position = "bottom")
g2 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "black", lwd = 0.01) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "B. EA (subarea) level") +
theme(legend.position = "bottom")
ggarrange(g1, g2, common.legend = TRUE, legend =)
ggarrange(g1, g2, common.legend = TRUE, legend = "bottom")
plot_grid(g1, g2, ncol = 2)
plot_grid(g1, g2, ncol = 2)
?plot_grid
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "black", lwd = 0.1) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "A. TA (area) level") +
theme(legend.position = "bottom")
g2 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "black", lwd = 0.001) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "B. EA (subarea) level") +
theme(legend.position = "none")
g2
# get the legend
g1legend <- get_legend(g1)
g1new <- plot_grid(g1 + theme(legend.position = "none"), g2, ncol = 2)
plot_grid(g1new, g1legend, ncol = 1, rel_heights = c(1, 0.1))
plot_grid(g1new, g1legend, ncol = 1, rel_heights = c(1, 0.1))
#| echo: true
#| include: true
#| class-output: hscroll
predictors
sum(is.na(predictors))
predictors
predictors[is.na(predictors)]
summary(predictors$EA_CODE)
predictors <- read_csv("day3data/mosaikvars.csv")
predictors <- predictors |> filter(!is.na(EA_CODE))
write_csv(predictors, "day3data/mosaikvars.csv")
library(tidyverse)
surveycollapsed <- read_csv("day3data/ihs5ea.csv")
predictors <- read_csv("day3data/mosaikvars.csv")
summary(predictors)
#| label: setup
#| include: false
widthdefault <- getOption("width")
options(width = 1500)
library(tidyverse)
library(sf)
library(cowplot)
library(haven)
library(terra)
library(tidyterra)
library(exactextractr)
library(ggpubr)
#| echo: true
#| include: true
library(tidyverse)
surveycollapsed <- read_csv("day3data/ihs5ea.csv")
predictors <- read_csv("day3data/mosaikvars.csv")
#| echo: false
#| include: true
#| fig-align: center
adm4 <- read_sf("day3data/mw4.shp")
adm4 <- adm4 |>
mutate(EA_CODE = as.numeric(EA_CODE)) |>
left_join(surveycollapsed, by = "EA_CODE")
adm4$insample <- "No"
adm4$insample[!is.na(adm4$poor)] <- "Yes"
adm3 <- read_sf("day3data/mw3.shp")
surveyTA <- surveycollapsed |>
mutate(TA_CODE = substr(EA_CODE, 1, 5)) |>
group_by(TA_CODE) |>
summarize(poor = weighted.mean(poor, total_weights, na.rm = TRUE),
total_obs = sum(total_obs, na.rm = TRUE)) |>
ungroup()
adm3 <- adm3 |>
left_join(surveyTA, by = "TA_CODE")
adm3$insample <- "No"
adm3$insample[!is.na(adm3$poor)] <- "Yes"
g1 <- ggplot() +
geom_sf(data = adm3, aes(fill = insample), color = "gray", lwd = 0.1) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "A. TA (area) level") +
theme(legend.position = "bottom")
g2 <- ggplot() +
geom_sf(data = adm4, aes(fill = insample), color = "gray", lwd = 0.001) +
scale_fill_brewer("Have sample\nobservations?", palette = "Spectral") +
theme_bw() +
labs(subtitle = "B. EA (subarea) level") +
theme(legend.position = "none")
# get the legend
g1legend <- get_legend(g1)
g1new <- plot_grid(g1 + theme(legend.position = "none"), g2, ncol = 2)
plot_grid(g1new, g1legend, ncol = 1, rel_heights = c(1, 0.1))
#| echo: true
#| include: true
#| class-output: hscroll
predictors
#| echo: true
#| include: true
#| class-output: hscroll
# this is how many subarea observations we have
nrow(surveycollapsed)
#| echo: true
#| include: true
#| class-output: hscroll
# this is how many predictors we have
ncol(predictors)
#| echo: true
#| include: true
surveycollapsed$fold <- sample(1:5, nrow(surveycollapsed), replace = TRUE)
head(surveycollapsed)
#| echo: true
#| include: true
library(glmnet)
set.seed(398465) # this is a random process, so we want to set the seed!
# we need to set up the data (combining the predictors and the outcome)
data <- surveycollapsed |>
left_join(predictors, by = "EA_CODE")
# cv.glmnet will set up everything for us
lasso <- cv.glmnet(
y = asin(sqrt(data$poor)), # the outcome
x = data |> dplyr::select(starts_with("mosaik")) |> as.matrix(), # the predictors (as.matrix() is required)
weights = data$total_weights, # the weights (sample weights)
nfolds = 5) # number of folds (10 is the default)
lasso
#| echo: true
#| include: true
lasso
#| echo: true
#| include: true
lasso
#| echo: false
#| include: true
#| fig.align: center
ggplot() +
geom_point(aes(x = log(lasso$glmnet.fit$lambda), y = log(lasso$cvm))) +
theme_bw() +
labs(x = "log(lambda)", y = "log(MSE)") +
geom_vline(aes(xintercept = log(lasso$lambda.min)), linetype = "dashed") +
geom_vline(aes(xintercept = log(lasso$lambda.1se)), linetype = "dashed")
#| echo: false
#| include: true
#| fig.align: center
ggplot() +
geom_point(aes(x = log(lasso$glmnet.fit$lambda), y = lasso$glmnet.fit$df)) +
theme_bw() +
labs(x = "log(lambda)", y = "Non-zero coefficients") +
geom_vline(aes(xintercept = log(lasso$lambda.min)), linetype = "dashed") +
geom_vline(aes(xintercept = log(lasso$lambda.1se)), linetype = "dashed")
#| echo: true
#| include: true
#| fig.align: center
coef(lasso, s = "lambda.min")
#| echo: true
#| include: true
# first, turn the coefs into a data.frame
coefs <- coef(lasso, s = "lambda.min") |>
as.matrix() |>
as.data.frame()
coefs
#| echo: true
#| include: true
# Now, create variable that is the name of the rows
coefs$variable <- rownames(coefs)
head(coefs)
# non-zero rows
coefs <- coefs[coefs$s1!=0,]
# finally, the names of the variables
coefs$variable
#| echo: true
#| include: true
#| # remove first value (the intercept)
allvariables <- coefs$variable[-1]
allvariables
#| echo: true
#| include: true
ebpformula <- as.formula(paste("poor ~", paste(allvariables, collapse = " + ")))
ebpformula
#| echo: true
#| include: true
library(povmap) # I like to use povmap instead of emdi (personal preference)
# get "area" variable
predictors$TA_CODE <- substr(predictors$EA_CODE, 1, 5)
data$TA_CODE <- substr(data$EA_CODE, 1, 5)
ebp <- ebp(fixed = ebpformula, # the formula
pop_data = predictors, # the population data
pop_domains = "TA_CODE", # the domain (area) name in the population data
smp_data = data, # the sample data
smp_domains = "TA_CODE", # the domain (area) name in the sample data
transformation = "arcsin", # I'm going to use the arcsin transformation
weights = "total_weights", # sample weights
weights_type = "nlme", # weights type
MSE = TRUE, # variance? yes please
L = 0) # this is a new thing in povmap: "analytical" variance estimates. much faster!
head(ebp$ind)
ebp
plot(ebp)
summary(ebp)
#| echo: true
#| include: true
#| class-output: hscroll
estimators(ebp, "Head_Count")
#| echo: true
#| include: true
#| class-output: hscroll
estimators(ebp, "Mean")
#| echo: true
#| include: true
#| class-output: hscroll
estimators(ebp, "Mean", mse = TRUE)
#| echo: true
#| include: true
#| class-output: hscroll
estimators(ebp, "Mean", mse = TRUE, cv = TRUE)
?estimators
#| echo: true
#| include: true
#| class-output: hscroll
estimators(ebp, "Mean", MSE = TRUE, CV = TRUE)
sqrt(0.029650480)/0.2786403
