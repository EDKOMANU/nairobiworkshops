---
title: "Your country data and more on using R for SAE"
subtitle: "Nairobi Workshop: Day 1"
author: 
  - name: Ann-Kristin Kreutzmann
  - name: Josh Merfeld
date: "26 August 2024"
date-format: long
format: 
  revealjs:
    self-contained: true
    slide-number: false
    progress: false
    theme: [serif, custom.scss]
    width: 1500
    height: 1500*(9/16)
    code-copy: true
    code-fold: show
    code-overflow: wrap
    highlight-style: github
execute:
  echo: false
  warnings: false

# to print as pdf: localhost:6106/?print-pdf (will have to change the local host number)

---

```{r}
#| label: setup
widthdefault <- getOption("width")
options(width = 1500)
library(tidyverse)
```





# Session 1: Country data in R

<font size = "+10"> By you! </font>


## Welcome

- Welcome to the first day of the workshop!

. . .

- We are going to start with the task you were given as your pre-workshop assignment.




## A quick reminder

- What did we ask from you?

. . .

1. Describe your country data set, e.g., number of observations and variables, content, sampling design, etc.

2. Describe the variable of interest, e.g., distribution, missing values, outstanding observations, etc.

3. Describe variables that you think are related to the variable of interest.

4. Demonstrate basic visualization of the selected indicators.





# Session 2: Hands-on session

<font size = "+10"> Data preparation for SAE </font>



## My slides

- Before we get into it, I have put all of my material on the web<br><br>

- You can find my slides (along with copy-pasteable code) AND the data I'm using on my GitHub repository:
  - [https://github.com/JoshMerfeld/nairobiworkshops](https://github.com/JoshMerfeld/nairobiworkshops)
  - Scroll down to the bottom and you'll find all of the links you'll need.
  - I'd suggest you have these open during the workshop to make things easier.





## Let's get started!

- Let's get started with the hands-on session.

- As a first step, I'd like to hear from all of you:
  - How much experience do you have using R?
  - This is all experience, not just with SAE





## Some things to note

- We will be using [<b>RStudio</b>](https://posit.co/download/rstudio-desktop/) throughout the workshops
  - There are other options you are welcome to use (VS Code is the most common alternative)
  
- Two general "data cleaning" pipelines:
  - The [<b>tidyverse</b>](https://www.tidyverse.org/)
  - The [<b>data.table</b>](https://rdatatable.gitlab.io/data.table/) package (which builds on base R)

- We will be using the tidyverse





## Getting started with RStudio

- Let's start by looking at the layout of RStudio.

- For those of you with ample R experience, nothing here will be new!




## {background-image="day1assets/rstudio1.png" background-size=contain}
## {background-image="day1assets/rstudio2.png" background-size=contain}
## {background-image="day1assets/rstudio3.png" background-size=contain}
## {background-image="day1assets/rstudio4.png" background-size=contain}
## {background-image="day1assets/rstudio5.png" background-size=contain}
## {background-image="day1assets/rstudio6.png" background-size=contain}
## {background-image="day1assets/rstudio7.png" background-size=contain}
## {background-image="day1assets/rstudio8.png" background-size=contain}






## Why don't you all give it a try

- Create a script in RStudio

- Save that script in a specific place (folder) on your computer
  - Make sure to keep track of where you save it!
  - I create a folder for each specific project I work on
  - e.g. you could create "Nairobi Workshops" and save the script as "day1.R"






## First things first: the working directory

- The working directory is the folder that R is currently working in
  - This is where R will look for files
  - This is where R will save files
  - This is where R will create files

- You can always write out an entire file path, but this is tedious
  - More importantly, it makes your code less reproducible since the path is specific to YOUR computer






## First things first: the working directory

- One nice thing about RStudio is that the working directory will automatically be where you open the script from
  - Let's try this. Save your script to a folder on your computer, then open the script from that folder.
  - Let's see if it worked!

```{r}
#| echo: true
getwd() # this command will show you your current working directory
```






## First things first: the working directory

- You can also set the working directory in RStudio
  - Session > Set Working Directory > Choose Directory (or Source File Location)
  - Give it a try and let's see if it worked!

```{r}
#| echo: true
getwd() # this command will show you your current working directory
```
  




## Always use the same working directory!

- Make sure to always set the working directory to the same location when working in the same script!<br><br>


- This will avoid problems later
  - It also makes your code more reproducible (e.g. if a colleague wants to run it, you just send the entire folder and it works with no changes)
  





## R packages


- R is a language that is built on packages
  - Packages are collections of functions that do specific things
  - R comes with a set of "base" packages that are installed automatically


- We are going to use one package consistently, called the "tidyverse"
  - This consists of a set of packages that are designed to work together, with data cleaning in mind





## R packages


The one exception to always using a script? I install packages in the CONSOLE. You can install packages like this:<br><br>

```{r}
#| echo: true
#| eval: false
install.packages("tidyverse") # this will install the tidyverse package. Note the quotes!
```

- You only need to install a package once on your computer.





## R packages


The first thing you'll do in your script is load packages. You do it like this:<br><br>

```{r}
#| echo: true
#| eval: false
'''
This script is part of the Nairobi Workshop on SAE.
Date: 26 August 2024 (written earlier!)
Author: Josh Merfeld
'''
# Load packages (libraries)
library(tidyverse)
```

- Note that the first part is a comment I've added to the script.
  - I make a lot of comments!






## Loading data

- Let's start by loading some data.
  - This is survey data from Tanzania (NPS 5, 2020)
  - It is a list of all individuals in all households in the survey
  - You can find this in the `day1data` folder in the repository
  
![](day1assets/github1){fig-align="center"}
  




## Loading data

- Let's start by loading some data.
  - This is survey data from Tanzania (NPS 5, 2020)
  - It is a list of all individuals in all households in the survey
  - You can find this in the `day1data` folder in the repository
  
![](day1assets/github2){fig-align="center"}




  
## Loading data

- Let's load the csv version. Tidyverse has a command for this: `read_csv()`<br><br>
- Note that you may have to change the path! Mine is in the day1data folder `within` my working directory (WD).
  - You need to point to the location of the file from your WD!<br><br>

```{r}
#| echo: true
# Load packages (libraries)
library(tidyverse)
# load data
df <- read_csv("day1data/tanzanialsms.csv")
```






## Looking at the data
  
- `glimpse` is an easy way to look at the data:

```{r}
#| echo: true
#| class-output: hscroll
# Load packages (libraries)
library(tidyverse)
# load data
df <- read_csv("day1data/tanzanialsms.csv")
glimpse(df)
```







## Data is not always in .csv files

- Sometimes files come in other formats

- I have uploaded a Stata file, as well (tanzanialsms.dta), in the same folder
  - To read Stata files (common with survey data), we need a different package, called `haven`
  - After we install it, you can load it using `read_dta()`
  
- Give it a try. Install the package and then load the data.

```{r}
#| echo: true
#| code-fold: true 
#| code-line-numbers: "|2|5|7"
# I do not need to install it because I already have it! But if you need it:
# install.packages("haven")
# Load packages (libraries)
library(tidyverse)
library(haven)
# load data
df <- read_dta("day1data/tanzanialsms.dta")
```







## But let's use the .csv file for now

```{r}
#| echo: true
#| class-output: hscroll
# Load packages (libraries)
library(tidyverse)
# load data
df <- read_csv("day1data/tanzanialsms.csv")
glimpse(df)
```





## Objects in memory

- The data frame is a matrix
  - Each row is an observation and each column is a variables
  - You can see it in the "environment" pane of RStudio

- We can also see the names of the columns like this:

```{r}
#| echo: true
#| class-output: hscroll
colnames(df)
```





## Calling variables in R

- Some of you might be used to Stata<br><br>

- One big difference between the two is that Stata generally only has one data frame in memory at a time
  - This means that you can call a variable *without referencing the data frame*<br><br>
  
- In R, if you want to look at a variable, you have to tell R which data frame it is in
  - This is done with the `$` operator
  - For example, if I want to look at the variable "age" in the data frame "data", I would write `data$age`
  - In our dataset, the age variable is `hh_b04`





## Summary stats for `hh_b04` (age)

- There are two common ways to quickly look at a variable:
  - `summary()`: gives you mean/median, and a few more
  - `table()`: gives you a frequency table

```{r}
#| echo: true
#| class-output: hscroll
summary(df$hh_b04)
```





## Summary stats for `hh_b04` (age)

- There are two common ways to quickly look at a variable:
  - `summary()`: gives you mean/median, and a few more
  - `table()`: gives you a frequency table

```{r}
#| echo: true
#| class-output: hscroll
table(df$hh_b04)
```






## Summary stats for everything

- If you don't specify a variable, it will give you information for the ENTIRE dataframe!

```{r}
#| echo: true
#| class-output: hscroll
summary(df)
```






## Variable types

- The most common are numeric, character, and logical
  - Numeric variables are numbers
    - For example, the variable `hh_b04` is a numeric variable
    - Missing value: `NA`
  - Character variables are text
    - For example, the variable `y5_hhid` is a character variable
    - Missing value: `""`
  - Logical variables are TRUE/FALSE
    - We don't have any examples here (at least not yet)
    - Missing value: `NA`






## Pipes

- One of the most useful things in R is the pipe operator (`|>` or `%>%`)
  - This is part of the tidyverse package
  - It allows you to chain commands together
  - It makes your code much easier to read
  - It makes your code much easier to write<br><br>
  
- Let's use it to clean some variables






## Pipes example

- I'm going to create some new variables. 
  - Going to use two columns: `hh_b02` and `hh_b04`

```{r}
#| echo: true
#| class-output: hscroll
glimpse(df[,c("hh_b02", "hh_b04")])
```






## Pipes example

- What do you think this does?

```{r}
#| echo: true
df <- df |>
  rename(gender = hh_b02, age = hh_b04) |> # <1>
  mutate(boy = gender=="male" & age<15, # <2>
    girl = gender=="female" & age<15,
    prime_aged_male = gender=="male" & age>=15 & age<=64,
    prime_aged_female = gender=="female" & age>=15 & age<=64,
    older_male = gender=="male" & age>64,
    older_female = gender=="female" & age>64)
```





## Pipes example

- What do you think this does?

```{r}
#| echo: true
#| eval: false
df <- df |>
  rename(gender = hh_b02, age = hh_b04) |> # <1>
  mutate(boy = gender=="male" & age<15, # <2>
    girl = gender=="female" & age<15,
    prime_aged_male = gender=="male" & age>=15 & age<=64,
    prime_aged_female = gender=="female" & age>=15 & age<=64,
    older_male = gender=="male" & age>64,
    older_female = gender=="female" & age>64)
```

1. Renames the variables `hh_b02` and `hh_b04` to `gender` and `age`, respectively (line 2)
2. Creates new variables based on the conditions given (lines 3-8)






## Pipes example

- Let's look at the resulting variables:

```{r}
#| echo: true
#| class-output: hscroll
summary(df[,c("boy", "girl", "prime_aged_male", "prime_aged_female", "older_male", "older_female")])
```


- What did I do here?
  - I summarized `df` based on the names of COLUMNS (variables)
    - I did this by creating a vector of column names (as characters)
  - The resulting variables are logical, or True/False
    - Why?







## Pipes example

- It is TRUE/FALSE because it is evaluating the expression
  - TRUE if the expression is true, FALSE otherwise
- If we want it to be 0/1, instead, we can simply wrap it in `as.numeric()`

```{r}
#| echo: true
#| eval: false
df <- df |>
  rename(gender = hh_b02, age = hh_b04) |> # <1>
  mutate(boy = as.numeric(gender=="male" & age<15), # <2>
    girl = as.numeric(gender=="female" & age<15),
    prime_aged_male = as.numeric(gender=="male" & age>=15 & age<=64),
    prime_aged_female = as.numeric(gender=="female" & age>=15 & age<=64),
    older_male = as.numeric(gender=="male" & age>64),
    older_female = as.numeric(gender=="female" & age>64))
```








## Let's do some more cleaning

- What are some other common data cleaning tasks?

::: {.fragment}
- Some common things:
  - Renaming variables
  - Creating new variables based on existing variables
    - Doing this based on groups
  - Replace values (e.g. replacing missings)
    - i.e. recoding variables
:::





## Let's do some more cleaning

- What are some other common data cleaning tasks?

::: {.inline-fragment}
- Some common things:
  - <font style="color:#340063;"><b>Renaming variables</b></font>
  - <font style="color:#340063;"><b>Creating new variables based on existing variables</b></font>
    - Doing this based on groups
  - Replace values (e.g. replacing missings)
    - i.e. recoding variables
:::





## What do we want to do?

- To do more, we need to look at the survey questionnaire!
  - The data I have uploaded is from Section B
  - You can find the survey questionnaire in the data folder for day 1
- Here's the data:

```{r}
#| echo: false
#| class-output: hscroll
df <- read_csv("day1data/tanzanialsms.csv")
df
```





## {background-image="day1assets/survey1.png"}





## Let's do some cleaning

- Two things:
  - Calculate the age of the head
  - Collapse the data to the HOUSEHOLD level, with the following variables:
    - Number of boys/girls
    - Number of prime-aged males/females
    - Number of older males/females
    - The head's gender<br><br>

- How do we do this?





## Let's do some cleaning

- Let's start by loading the data again
  - You might want to try this in a new script so you have a self-contained example of data cleaning
  - Go ahead and load libraries and read the .csv (not .dta) data:
  

```{r}
#| echo: true
#| code-fold: true
library(tidyverse)
df <- read_csv("day1data/tanzanialsms.csv") #if it's in your WD, you will just have "tanzanialsms.csv"
```





## Back to our task

- Calculate the age of the head
- Collapse the data to the HOUSEHOLD level, with the following variables:
  - Number of boys/girls
  - Number of prime-aged males/females
  - Number of older males/females
  - The head's gender<br><br>

- What are the variables we need? (look at the questionnaire)

  ::: {.fragment}
  - `hh_b02` (gender)
  - `hh_b04` (age)
  - `hh_b05` (relationship to head)
  - `y5_hhid` (household identifier)
  :::





## How are we going to do this?

- Create the new variables
  - Boys, girls, prime-aged males, prime-aged females, older males, older females
  - The head's gender<br><br>

- Collapse the data to the household level
  - We will want to sum the count variables
  - We will want to take the highest value for the head's gender (since there is only one)





## First, rename some variables

```{r}
#| echo: true
#| code-fold: show
dfhh <- df |>
  rename(gender = hh_b02, age = hh_b04, relationship = hh_b05) |> # <1>
  select(y5_hhid, gender, age, relationship) # <2>
head(dfhh) # <3>
unique(dfhh$relationship) # <4>
```

1. Renames the variables `hh_b02` and `hh_b04` to `gender` and `age`, respectively, as well as relationship to the head
2. Just keep the variables we want
3. Shows us the first few lines
4. Unique values for `relationship`



## Now, create new variables (with new `dfhh` object)

```{r}
#| echo: true
#| code-fold: show
dfhh <- dfhh |>
  mutate(boy = (gender=="male" & age<15), # <1>
    girl = (gender=="female" & age<15),
    prime_aged_male = (gender=="male" & age>=15 & age<=64),
    prime_aged_female = (gender=="female" & age>=15 & age<=64),
    older_male = (gender=="male" & age>64),
    older_female = (gender=="female" & age>64),
    head_male = ifelse(relationship=="head", gender=="male", NA)) |> # <2>
  select(y5_hhid, boy, girl, prime_aged_male, prime_aged_female, older_male, older_female, head_male) # <3>
```

1. Creates new variables based on the conditions given (lines 3-8)
2. Creates head's mother's education variable based on the condition given (line 9)
3. Just keep the variables we want





## Finally, aggregate to household

```{r}
#| echo: true
#| code-fold: show
dfhh <- dfhh |>
  group_by(y5_hhid) |>
  summarize(boy = sum(boy, na.rm = TRUE),
    girl = sum(girl, na.rm = TRUE),
    prime_aged_male = sum(prime_aged_male, na.rm = TRUE),
    prime_aged_female = sum(prime_aged_female, na.rm = TRUE),
    older_male = sum(older_male, na.rm = TRUE),
    older_female = sum(older_female, na.rm = TRUE),
    head_male = max(head_male, na.rm = TRUE))
summary(dfhh)
```





## Why is this important for SAE?

- You will use this type of aggregation _all_ the time in SAE.<br><br>

- We often model at an aggregate level
  - Could be the household
  - Could be the district
  - Could be the county
  - Etc.<br><br>
  
- So bookmark this code!







## Now it's your turn!

- Select some variables from the dataset
<br>
  
- Create the following household-level dataset:
  - Total household size
  - Proportion of CHILDREN (<15) who are male
  - Proportion of ADULTS (15+) who are female







## My code for this
  
```{r}
#| echo: true
#| code-fold: show
# create new variables from the clean df data
dfhh <- df |>
  rename(gender = hh_b02, age = hh_b04, relationship = hh_b05) |>
  mutate(male_child = ifelse(age<15, gender=="male", NA),
    female_adult = ifelse(age>=15, gender=="female", NA)) |>
  select(y5_hhid, male_child, female_adult)
# now collapse
dfhh <- dfhh |>
  group_by(y5_hhid) |>
  summarize(prop_children_male = mean(male_child, na.rm = TRUE),
    prop_adult_female = mean(female_adult, na.rm = TRUE),
    hhsize = n()) |>
  ungroup()
summary(dfhh) # note the NAs for prop_children_male! Why is it missing?
```





# Visualization with `ggplot2`


## What is `ggplot2`?

- `ggplot2` is included in the `tidyverse` package
  - It is a package for creating beautiful graphics
  - Let's look at some of the basics<br><br>
  
- Let's start over with our .csv file<br><br>

```{r}
#| echo: true
#| code-fold: true
library(tidyverse)
df <- read_csv("day1data/tanzanialsms.csv") # if it's in your folder, you will just have "tanzanialsms.csv"
```
  





## Basic syntax for `ggplot2`?

- The basic syntax is as follows:

`ggplot() + geom_point(data = df, aes(x = xvar, y = yvar))`<br><br>

- Note the use of `+` and not `|>`
- `geom_point` can be replaced with all sorts of "geoms"!
  - `geom_line`
  - `geom_bar`
  - `geom_density` (this will have no `y` variable)
  - `geom_histogram` (same)



## Let's look at an example

- Let's start with one that is simple to understand
  - How about the distribution of age in the dataset?

```{r}
#| echo: true
#| code-fold: show
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04))
```



## Cleaning it up a bit

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count")
```
:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count")
```
:::

::::



## Cleaning it up even more (my favorite "theme")

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```

- You can look at all the built-in themes [here](https://ggplot2.tidyverse.org/reference/ggtheme.html)^[[https://ggplot2.tidyverse.org/reference/ggtheme.html](https://ggplot2.tidyverse.org/reference/ggtheme.html)]

:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
:::

::::



## What if we want to add by gender?

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw() +
  facet_wrap(~hh_b02, ncol = 1)
```
:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw() +
  facet_wrap(~hh_b02, ncol = 1)
```
:::

::::



## What if we want to add by gender?

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw() +
  facet_wrap(~hh_b02, ncol = 2)
```
:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04)) +
  labs(x = "Age", y = "Count") +
  theme_bw() +
  facet_wrap(~hh_b02, ncol = 2)
```
:::

::::



## Putting them on one plot is simple, too!

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, color = hh_b02)) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```

- This is a `stacked` histogram, which I don't like (hard to see the differences)
:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04, color = hh_b02)) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
:::

::::



## Putting them on one plot is simple, too!

:::: {.columns}

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, color = hh_b02), 
    position = "identity") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```

- This "unstacks" the histogram
- But now it's hard to see in a different way!
:::

::: {.column width="55%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, aes(x = hh_b04, color = hh_b02), position = "identity") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
:::

::::




## Fill instead of color?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```

- Still hard to see both! 
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
1. Change opacity with `alpha` (OUTSIDE the `aes()`)
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity") +
  labs(x = "Age", y = "Count") +
  theme_bw()
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
:::

::::







## Cleaning up the legend with `scale_fill_brewer`

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| code-fold: show
#| eval: false
# Let's use the `scale_fill_brewer` function to clean up the legend (title and fill colors)
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```


```{r}
#| echo: true
#| code-fold: show
#| eval: false
# Note that difference with `color`
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, color = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_color_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
- scale_color_brewer vs. scale_fill_brewer
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count") +
  theme_bw()
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, color = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_color_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count") +
  theme_bw()
```
:::

::::






## Finally, changing the location of the legend!

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count", title = "A. Bottom legend") +
  theme_bw() +
  theme(legend.position = "bottom")
```
<br>
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count", title = "B. Legend in plot") +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count", title = "A. Bottom legend") +
  theme_bw() +
  theme(legend.position = "bottom")
ggplot() +
  geom_histogram(data = df, 
    aes(x = hh_b04, fill = hh_b02), 
    position = "identity",
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "Accent") +
  labs(x = "Age", y = "Count", title = "B. Legend in plot") +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```
:::

::::



## Just FYI, the R Color Brewer palettes


:::: {.columns}

::: {.column width="55%"}
- Here you can see all the color palettes
- Some of these are for continuous variables
- The middle section is mostly for categorical variables (like gender)

- Choose color by changing the PALETTE NAME:
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_density(data = df, 
    aes(x = hh_b04, fill = hh_b02),
    alpha = 0.5) +
  scale_fill_brewer("Gender", palette = "PALETTE NAME") +
  labs(x = "Age", y = "Density") +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

::: {.column width="45%"}
![](day1assets/colors.png)
:::

::::



## Let's look at another example

- In this example, we'll also practice aggregating to higher levels (again!)
  - Let's look at the proportion of people in agriculture and in education BY AGE GROUP
  - We are going to use the following variables:
    - `hh_b04` (age)
    - `hh_b11` (main occupation)

```{r}
#| echo: true
#| code-fold: show
#| class-output: hscroll
unique(df$hh_b11)
```
<br>
- The relevant two values are "AGRICULTURE / LIVESTOCK" and "student"




## First, we need to create age groups

- Let's create age groups using the `cut` function
  - This will create a *factor* variable

```{r}
#| echo: true
#| code-fold: show
#| class-output: hscroll
df <- df |>
  mutate(age_groups = cut(hh_b04, breaks = seq(from = 0, to = max(df$hh_b04), by = 5))) # <1>
head(df$age_groups)
```

1. Creates a new variable `age_groups` based on the conditions given (line 3)
- The `seq` function creates a sequence of numbers from 0 to the maximum age in the dataset, in increments of 5




## Now, let's create the occupation variables

```{r}
#| echo: true
#| code-fold: show
#| class-output: hscroll
df <- df |>
  mutate(ag = ifelse(hh_b11 == "AGRICULTURE / LIVESTOCK", 1, 0), # <1>
    ed = ifelse(hh_b11 == "student", 1, 0)) # <2>
```

- Now aggregate to `age_groups`

```{r}
#| echo: true
#| code-fold: show
#| class-output: hscroll
dfgroups <- df |>
  filter(!is.na(age_groups)) |> # <1>
  group_by(age_groups) |> # <2>
  summarize(ag = mean(ag, na.rm = TRUE), # <3>
    ed = mean(ed, na.rm = TRUE)) |>
  ungroup() # <4>
```

1. Removes missing values
2. Groups by `age_groups`
3. Calculates the mean of `ag` and `ed` (removing missing values)
4. Ungroups the data frame




## Now we can plot them

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category",
    title = "Agriculture") +
  theme_bw()
```
<br><br>
```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category",
    title = "Student") +
  theme_bw()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category",
    title = "Agriculture") +
  theme_bw()
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category",
    title = "Student") +
  theme_bw()
```
:::

::::




## But what if we want to plot them on the same graph?


:::: {.columns}

::: {.column width="50%"}
<br>

- This is a little more complicated!
- Look what happens here:

```{r}
#| echo: true
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag)) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  theme_bw()
```

- Do you see the problem?
:::

::: {.column width="50%"}
<br><br><br>

```{r}
#| echo: false
#| eval: true
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag)) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed)) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  theme_bw()
```
:::

::::




## But what if we want to plot them on the same graph?


:::: {.columns}

::: {.column width="50%"}
<br>

- We can specify individual colors, OUTSIDE the `aes()`.

```{r}
#| echo: true
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag), color = "navy") +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed), color = "orange") +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  theme_bw()
```

- Still a problem! What is it?
:::

::: {.column width="50%"}
<br><br><br>

```{r}
#| echo: false
#| eval: true
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag), color = "navy") +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed), color = "orange") +
  labs(x = "Age group", y = "Proportion of respondents in category") +
  theme_bw()
```
:::

::::




## Here's the code. Let's discuss!

```{r}
#| echo: true
#| eval: true
library(RColorBrewer)
colors <- brewer.pal(3, "Set2")
colors
```

<br>


```{r}
#| echo: true
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag, color = "Ag")) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed, color = "Educ.")) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw()
```




## How does it look?


:::: {.columns}

::: {.column width="55%"}

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag, color = "Ag")) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed, color = "Educ.")) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw()
```

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag, color = "Ag")) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed, color = "Educ.")) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```
:::

::: {.column width="45%"}
```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag, color = "Ag")) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed, color = "Educ.")) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw()
ggplot() +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ag, color = "Ag")) +
  geom_point(data = dfgroups, 
    aes(x = age_groups, y = ed, color = "Educ.")) +
  labs(x = "Age group", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```
:::

::::




## What about doing line graphs?


- We have to make a change! We cannot do a line graph with a factor variable!

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ag, color = "Ag")) + # <1>
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  scale_x_continuous(breaks = as.numeric(unique(dfgroups$age_groups)), labels = unique(dfgroups$age_groups)) + # <2>
  labs(x = "Age group", y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```
1. Turn it into a numeric variable.
2. Change the x-axis to the numeric values and label it with the original values.




## What about doing line graphs?

```{r}
#| echo: false
#| evaluate: true
ggplot() +
  geom_line(data = dfgroups, 
    aes(x = as.numeric(age_groups), y = ag, color = "Ag")) +
  geom_line(data = dfgroups, 
    aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  scale_x_continuous(breaks = as.numeric(unique(dfgroups$age_groups)), 
    labels = unique(dfgroups$age_groups)) +
  labs(x = "Age", 
    y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", 
    values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```






## Finally, the points and lines together

```{r}
#| echo: true
#| code-fold: show
#| eval: false
ggplot() +
  geom_point(data = dfgroups, aes(x = as.numeric(age_groups), y = ag, color = "Ag")) +
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ag, color = "Ag")) +
  geom_point(data = dfgroups, aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  scale_x_continuous(breaks = as.numeric(unique(dfgroups$age_groups)), labels = unique(dfgroups$age_groups)) + # <2>
  labs(x = "Age group", y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```




## Finally, the points and lines together

```{r}
#| echo: false
#| eval: true
ggplot() +
  geom_point(data = dfgroups, aes(x = as.numeric(age_groups), y = ag, color = "Ag")) +
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ag, color = "Ag")) +
  geom_point(data = dfgroups, aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  geom_line(data = dfgroups, aes(x = as.numeric(age_groups), y = ed, color = "Educ.")) +
  scale_x_continuous(breaks = as.numeric(unique(dfgroups$age_groups)), labels = unique(dfgroups$age_groups)) + # <2>
  labs(x = "Age group", y = "Proportion of respondents in category") +
  scale_color_manual("Occupation:", values = c("Ag" = colors[1], "Educ." = colors[2])) +
  theme_bw() +
  theme(legend.position = c(0.9, 0.8))
```









## Now it's your turn!

- Select some variables from the dataset
<br>
  
- You need to create the following:
  - A graph with only one variable (e.g. density/histogram)
  - A graph with two variables (e.g. point or line)












## Time dependent: Now it's your turn, part !

- Use your own country data
  - If you don't have any, group up!
<br>
  
- Create two nice visualizations using your country data
















